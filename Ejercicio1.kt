/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

interface Electrodomestico {
    enum class Color {BLANCO,NEGRO,ROJO,AZUL,GRIS}
    class LetraConsumoInvalidaException(message: String) : Exception(message)
    var consumo: Char
    fun compruebaConsumo(car: Char): Char{
        if(car.uppercase().toCharArray()[0]>='A'&& car.uppercase().toCharArray()[0]<='F') {
            return car.uppercase().toCharArray()[0]
        } else{
            throw LetraConsumoInvalidaException("Letra no aceptada")
        }
    }
    val precio: Float
        get(){
            val con = when(consumo){
                'A' -> 100f
                'B' -> 80f
                'C' -> 60f
                'E' -> 30f
                else -> 10f
            }
            return con + peso *2
        }
    var peso: Float
    val color: Color
        get() = Color.BLANCO

}

class Lavadora(override var consumo: Char, override var peso: Float,var carga: Int) : Electrodomestico {
    override var color: Electrodomestico.Color = Electrodomestico.Color.BLANCO
    override fun compruebaConsumo(car: Char): Char {
        return super.compruebaConsumo(car)
    }
    override val precio: Float
        get() = if(carga>6) super.precio+50 else super.precio
    init {
        consumo = compruebaConsumo(consumo)
    }
    private fun validaColor(colorStr:String) : Electrodomestico.Color{
        return try {
            Electrodomestico.Color.valueOf(colorStr.uppercase())
        } catch (e: IllegalArgumentException){
            throw IllegalArgumentException("El nombre introducido no existe")
        }
    }
    constructor( consumo: Char,colorStr: String  ,peso: Float ,carga: Int ) : this(consumo,peso, carga){
        color = validaColor(colorStr)
    }

    override fun toString(): String {
        return "${this.consumo} $color $precio $peso Kg de carga -- $precio â‚¬"
    }
}

fun main() {
    val lavadora=Lavadora('B',"Gris",80f,5)
    println(lavadora)
    val x=lavadora.let {
        it.carga=8
        println(it)
    }
    println(x)
    val lavadora2=Lavadora('A',60f,9).apply {
        println(this)
        color=Electrodomestico.Color.ROJO
        println(this)
    }
    println(lavadora2)

}
